/*******************************************************************************
 * <copyright>
 * This file is part of the Extensible Coordination Tools (ECT).
 * Copyright (c) 2013 ECT developers. 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * </copyright>
 *******************************************************************************/
package org.ect.reo.channels.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.ect.reo.channels.ChannelsAdapterFactory;


/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ChannelsItemProviderAdapterFactory extends ChannelsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ChannelsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.Sync} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SyncItemProvider syncItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.Sync}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSyncAdapter() {
		if (syncItemProvider == null) {
			syncItemProvider = new SyncItemProvider(this);
		}

		return syncItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.LossySync} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LossySyncItemProvider lossySyncItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.LossySync}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLossySyncAdapter() {
		if (lossySyncItemProvider == null) {
			lossySyncItemProvider = new LossySyncItemProvider(this);
		}

		return lossySyncItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.FIFO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FIFOItemProvider fifoItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.FIFO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFIFOAdapter() {
		if (fifoItemProvider == null) {
			fifoItemProvider = new FIFOItemProvider(this);
		}

		return fifoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.LossyFIFO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LossyFIFOItemProvider lossyFIFOItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.LossyFIFO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLossyFIFOAdapter() {
		if (lossyFIFOItemProvider == null) {
			lossyFIFOItemProvider = new LossyFIFOItemProvider(this);
		}

		return lossyFIFOItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.SyncDrain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SyncDrainItemProvider syncDrainItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.SyncDrain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSyncDrainAdapter() {
		if (syncDrainItemProvider == null) {
			syncDrainItemProvider = new SyncDrainItemProvider(this);
		}

		return syncDrainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.AsyncDrain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AsyncDrainItemProvider asyncDrainItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.AsyncDrain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAsyncDrainAdapter() {
		if (asyncDrainItemProvider == null) {
			asyncDrainItemProvider = new AsyncDrainItemProvider(this);
		}

		return asyncDrainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.SyncSpout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SyncSpoutItemProvider syncSpoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.SyncSpout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSyncSpoutAdapter() {
		if (syncSpoutItemProvider == null) {
			syncSpoutItemProvider = new SyncSpoutItemProvider(this);
		}

		return syncSpoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.AsyncSpout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AsyncSpoutItemProvider asyncSpoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.AsyncSpout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAsyncSpoutAdapter() {
		if (asyncSpoutItemProvider == null) {
			asyncSpoutItemProvider = new AsyncSpoutItemProvider(this);
		}

		return asyncSpoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.Filter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterItemProvider filterItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.Filter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterAdapter() {
		if (filterItemProvider == null) {
			filterItemProvider = new FilterItemProvider(this);
		}

		return filterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.Transform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformItemProvider transformItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.Transform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformAdapter() {
		if (transformItemProvider == null) {
			transformItemProvider = new TransformItemProvider(this);
		}

		return transformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.Timer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimerItemProvider timerItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.Timer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimerAdapter() {
		if (timerItemProvider == null) {
			timerItemProvider = new TimerItemProvider(this);
		}

		return timerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.CustomDirectedChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomDirectedChannelItemProvider customDirectedChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.CustomDirectedChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomDirectedChannelAdapter() {
		if (customDirectedChannelItemProvider == null) {
			customDirectedChannelItemProvider = new CustomDirectedChannelItemProvider(this);
		}

		return customDirectedChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.CustomDrainChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomDrainChannelItemProvider customDrainChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.CustomDrainChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomDrainChannelAdapter() {
		if (customDrainChannelItemProvider == null) {
			customDrainChannelItemProvider = new CustomDrainChannelItemProvider(this);
		}

		return customDrainChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.CustomSpoutChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomSpoutChannelItemProvider customSpoutChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.CustomSpoutChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomSpoutChannelAdapter() {
		if (customSpoutChannelItemProvider == null) {
			customSpoutChannelItemProvider = new CustomSpoutChannelItemProvider(this);
		}

		return customSpoutChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.PrioritySync} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrioritySyncItemProvider prioritySyncItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.PrioritySync}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrioritySyncAdapter() {
		if (prioritySyncItemProvider == null) {
			prioritySyncItemProvider = new PrioritySyncItemProvider(this);
		}

		return prioritySyncItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.BlockingSourceSync} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockingSourceSyncItemProvider blockingSourceSyncItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.BlockingSourceSync}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockingSourceSyncAdapter() {
		if (blockingSourceSyncItemProvider == null) {
			blockingSourceSyncItemProvider = new BlockingSourceSyncItemProvider(this);
		}

		return blockingSourceSyncItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.BlockingSinkSync} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockingSinkSyncItemProvider blockingSinkSyncItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.BlockingSinkSync}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockingSinkSyncAdapter() {
		if (blockingSinkSyncItemProvider == null) {
			blockingSinkSyncItemProvider = new BlockingSinkSyncItemProvider(this);
		}

		return blockingSinkSyncItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ect.reo.channels.BlockingSync} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockingSyncItemProvider blockingSyncItemProvider;

	/**
	 * This creates an adapter for a {@link org.ect.reo.channels.BlockingSync}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockingSyncAdapter() {
		if (blockingSyncItemProvider == null) {
			blockingSyncItemProvider = new BlockingSyncItemProvider(this);
		}

		return blockingSyncItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (syncItemProvider != null) syncItemProvider.dispose();
		if (lossySyncItemProvider != null) lossySyncItemProvider.dispose();
		if (fifoItemProvider != null) fifoItemProvider.dispose();
		if (lossyFIFOItemProvider != null) lossyFIFOItemProvider.dispose();
		if (syncDrainItemProvider != null) syncDrainItemProvider.dispose();
		if (asyncDrainItemProvider != null) asyncDrainItemProvider.dispose();
		if (syncSpoutItemProvider != null) syncSpoutItemProvider.dispose();
		if (asyncSpoutItemProvider != null) asyncSpoutItemProvider.dispose();
		if (filterItemProvider != null) filterItemProvider.dispose();
		if (transformItemProvider != null) transformItemProvider.dispose();
		if (timerItemProvider != null) timerItemProvider.dispose();
		if (customDirectedChannelItemProvider != null) customDirectedChannelItemProvider.dispose();
		if (customDrainChannelItemProvider != null) customDrainChannelItemProvider.dispose();
		if (customSpoutChannelItemProvider != null) customSpoutChannelItemProvider.dispose();
		if (prioritySyncItemProvider != null) prioritySyncItemProvider.dispose();
		if (blockingSourceSyncItemProvider != null) blockingSourceSyncItemProvider.dispose();
		if (blockingSinkSyncItemProvider != null) blockingSinkSyncItemProvider.dispose();
		if (blockingSyncItemProvider != null) blockingSyncItemProvider.dispose();
	}

}
