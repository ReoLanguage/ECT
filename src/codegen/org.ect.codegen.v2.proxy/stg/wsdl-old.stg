proxyClass(party) ::= <<
import java.util.HashMap;
import java.util.Map;

import cwi.reo.runtime.java.core.Connector;
import cwi.reo.runtime.java.core.io.port.InPort;
import cwi.reo.runtime.java.core.io.port.OutPort;
import cwi.reo.runtime.java.core.io.port.Port;
import cwi.reo.runtime.java.core.console.Console;
import cwi.reo.runtime.java.proxy.Log4j;
import cwi.reo.runtime.java.proxy.SimulationAutomaton;
import cwi.reo.runtime.java.proxy.wsdl.WSDLService;
import cwi.reo.runtime.java.proxy.wsdl.WSDLServices;
import cwi.reo.runtime.java.proxy.wsdl.WSDLInfrastructure;
import cwi.reo.runtime.java.proxy.wsdl.WSDLProxy;
import cwi.reo.runtime.java.proxy.wsdl.parser.WSDLClient;
import cwi.reo.runtime.java.proxy.wsdl.parser.WSDLResource;
import cwi.reo.runtime.java.proxy.wsdl.parser.WSDLResource.WSDLResourceException;

public class <party.className> extends WSDLProxy {

	//
	// CONSTRUCTORS
	//
	
	/**
	 * Constructs a proxy for the service named {@link #NAME}.
	 *
	 * @param automaton
	 *             The simulation automaton ran by the proxy to construct. Not
	 *             \<code\>null\</code\>.
	 * @param infrastructure
	 *             The infrastructure to the service named {@link #NAME}. Not
	 *             \<code\>null\</code\>.
	 * @param exceptionPort
	 *             A port to which exception at runtime are written. Not
	 *             \<code\>null\</code\>.
	 * @throws NullPointerException
	 *             If \<code\>automaton==null\</code\> or 
	 *             \<code\>infrastructure==null\</code\> or
	 *             \<code\>exceptionPort==null\</code\>.
	 */
	private <party.className>(
			final SimulationAutomaton automaton,
			final WSDLInfrastructure infrastructure,
			final OutPort exceptionPort) {
			
		super(automaton, infrastructure, exceptionPort);
	}
	
	//
	// STATIC - FIELDS
	//
	
	/**
	 * The name of the service proxied by this proxy.
	 */
	public static final String NAME = "<party.name>";
	
	/**
	 * A (resource containing the) WSDL specification of the service proxied by
	 * this proxy. 
	 */
	public static final WSDLResource SPECIFICATION;
	
	//
	// STATIC - INITIALIZERS
	//
	
	/**
	 * Disables Log4j.
	 */
	static {
		Log4j.disable();
	}
	
	/**
	 * Initializes {@link #SPECIFICATION}.
	 */
	static {
		WSDLResource resource = null;
		try {
			resource = new WSDLResource(
					"<party.interfacesResource.escapedResourceText>");
		} catch (final WSDLResourceException e) {
		}
		SPECIFICATION = resource;
	}
	
	//
	// STATIC - METHODS
	//

	public static <party.className> newInstance(
			final OutPort exceptionPort,
			<comma_separated_list([party.observableInputVertices, party.observableOutputVertices], {final Port <elem.variableName>})>)
			throws Exception {
			
		if (SPECIFICATION == null)
			throw new Exception(
					"This proxy class seems corrupted. Please generate a new proxy.");
	
		/* Create the proxy-side ports. */
		<separated_list(
			party.unobservableInputVertices,
			{<\n>},
			{final InPort <elem.variableName> = new InPort();}
		)>
		
		<separated_list(
			party.unobservableOutputVertices,
			{<\n>},
			{final OutPort <elem.variableName> = new OutPort();}
		)>
		
		/* Create maps from their names to the proxy-side ports. */
		final Map\<String, InPort\> namesToInputPorts = new HashMap\<String, InPort\>();
		<separated_list(
			party.unobservableInputVertices,
			{<\n>},
			{namesToInputPorts.put("<elem.name>", <elem.variableName>);}
		)>
		
		final Map\<String, OutPort\> namesToOutputPorts = new HashMap\<String, OutPort\>();
		<separated_list(
			party.unobservableOutputVertices,
			{<\n>},
			{namesToOutputPorts.put("<elem.name>", <elem.variableName>);}
		)>

		/* Create (and run) the simulation automaton. */
		final Connector connector = new <party.simAut.className>(
			<separated_list(
				party.simAut.behavior.inputVertices,
				{,<\n>},
				{<elem.variableName>})
			>,
			<separated_list(
				party.simAut.behavior.outputVertices,
				{,<\n>},
				{<elem.variableName>})
			>);
			
		new Thread(connector).start();
		final SimulationAutomaton automaton = new SimulationAutomaton(connector, 
				"<party.buttonVertex.name>", namesToInputPorts, namesToOutputPorts);

		/* Create the infrastructure. */
		final WSDLService service = new WSDLServices(SPECIFICATION).getInterface(NAME);
		final WSDLClient client = new WSDLClient(SPECIFICATION, NAME);
		final WSDLInfrastructure infrastructure = new WSDLInfrastructure(NAME, service, client);
	
		/* Create the proxy. */
		return new <party.className>(automaton, infrastructure, exceptionPort);
	}
	
	//
	// MAIN
	//

	public static void main(String[] args) {
	
		/* Create ports. */
		<separated_list(
			party.observableInputVertices,
			{<\n>},
			{final InPort <elem.variableName> = new InPort();}
		)>
		<separated_list(
			party.observableOutputVertices,
			{<\n>},
			{final OutPort <elem.variableName> = new OutPort();}
		)>
		final OutPort exceptionPort = new OutPort();
		
		/* Create a proxy. */
		try {
			<party.className>.newInstance(exceptionPort, <comma_separated_list([party.observableInputVertices, party.observableOutputVertices], {<elem.variableName>})>).run();
		} catch (Exception e) {
			System.out.println("Something went wrong while constructing <party.className>...");
			System.exit(1);
		}
		
		/* Create maps from their names to the accessible ports. */
		final Map\<String, InPort\> namesToInputPorts = new HashMap\<String, InPort\>();
		<separated_list(
			party.observableInputVertices,
			{<\n>},
			{namesToInputPorts.put("<elem.name>", <elem.variableName>);}
		)>
		final Map\<String, OutPort\> namesToOutputPorts = new HashMap\<String, OutPort\>();
		<separated_list(
			party.observableOutputVertices,
			{<\n>},
			{namesToOutputPorts.put("<elem.name>", <elem.variableName>);}
		)>
		
		/* Create console. */
		final Console console = new Console(namesToInputPorts, namesToOutputPorts);
		console.run();
	}
}
>>

comma_separated_list(list, template) ::= <<
<separated_list(list, {, }, template)>
>>

separated_list(list, separator, template) ::= <<
<[first(list)] : { elem | <template>}><rest(list) : { elem | <separator><template>}>
>>