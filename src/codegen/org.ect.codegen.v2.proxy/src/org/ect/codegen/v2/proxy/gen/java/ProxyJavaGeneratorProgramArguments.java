package org.ect.codegen.v2.proxy.gen.java;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.ect.codegen.v2.core.gen.AbstractGeneratorProgramArguments;
import org.ect.codegen.v2.proxy.descr.java.IDLProxyDefaultsResolver;
import org.ect.codegen.v2.proxy.descr.java.WSDLProxyDefaultsResolver;

public class ProxyJavaGeneratorProgramArguments extends
		AbstractGeneratorProgramArguments {

	private static final long serialVersionUID = 1L;

	//
	// FIELDS
	//

	/**
	 * Flag indicating if the "proxygen"-program should compile the proxy it
	 * generates.
	 */
	public final boolean COMPILE;

	/**
	 * Flag indicating if the "proxygen"-program should run in CORBA mode.
	 */
	public final boolean CORBA;

	/**
	 * Flag indicating if the "proxygen"-program should associate a default
	 * simulation automaton with the party to generate a proxy for.
	 */
	public final boolean DEFAULT_SIM_AUT;

	/**
	 * Path to the destination directory of the proxy generated by the
	 * "proxygen"-program.
	 */
	public final String DESTINATION_PATH;

	/**
	 * Path to the interfaces file containing the interface implemented by the
	 * party to generate a proxy for.
	 */
	public final String INTERFACES_PATH;

	/**
	 * The name of the interface implemented by the party to generate a proxy
	 * for.
	 */
	public final String INTERFACE_NAME;

	/**
	 * Flag indicating if the "proxygen"-program should print the code it
	 * generates.
	 */
	public final boolean PRINT;

	/**
	 * Paths, separated by {@link File#pathSeparator}, to the directories
	 * containing the non-Java resources on which compilation and execution of
	 * the proxy generated by the "proxygen"-program depends.
	 */
	public final String PROXY_RESOURCES_PATHS;

	/**
	 * Paths, separated by {@link File#pathSeparator}, to the directories
	 * containing the Java sources on which compilation and execution of the
	 * proxy generated by the "proxygen"-program depends.
	 */
	public final String PROXY_SOURCES_PATHS;

	/**
	 * Paths, separated by {@link File#pathSeparator}, to the template files
	 * used by the "proxygen"-program.
	 */
	public final String PROXY_TEMPLATES_PATHS;

	/**
	 * Path to the simulation automaton file for the party to generate a proxy
	 * for.
	 */
	public final String SIM_AUT_PATH;

	/**
	 * Flag indicating if the "proxygen"-program should run in WSDL mode.
	 */
	public final boolean WSDL;

	//
	// CONSTRUCTORS
	//

	public ProxyJavaGeneratorProgramArguments()
			throws AbstractGeneratorProgramArgumentsException {

		super("", "");

		this.COMPILE = false;
		this.CORBA = false;
		this.DEFAULT_SIM_AUT = false;
		this.PRINT = false;
		this.WSDL = false;

		this.DESTINATION_PATH = null;
		this.INTERFACES_PATH = null;
		this.INTERFACE_NAME = null;
		this.PROXY_RESOURCES_PATHS = null;
		this.PROXY_SOURCES_PATHS = null;
		this.PROXY_TEMPLATES_PATHS = null;
		this.SIM_AUT_PATH = null;
	}

	public ProxyJavaGeneratorProgramArguments(final Boolean compile, Boolean corba,
			final Boolean defaultSimAut, final String destinationPath,
			final String interfaceName, final String interfacesPath,
			final Boolean print, final String proxyResourcesPaths,
			final String proxySourcesPaths, final String proxyTemplatesPaths,
			final String simAutPath, final Boolean wsdl)
			throws ProxygenArgumentsException,
			AbstractGeneratorProgramArgumentsException {

		super("", "");

		try {
			this.COMPILE = compile == null ? false : compile;
			this.CORBA = corba == null ? false : corba;
			this.DEFAULT_SIM_AUT = defaultSimAut == null ? false
					: defaultSimAut;
			this.PRINT = print == null ? false : print;
			this.WSDL = wsdl == null ? false : wsdl;

			final ProxyJavaGeneratorDefaults resolver;
			if (this.CORBA)
				resolver = new IDLProxyDefaultsResolver();
			else
				// (this.WSDL)
				resolver = new WSDLProxyDefaultsResolver();

			this.INTERFACE_NAME = interfaceName == null ? resolver
					.INTERFACE_NAME() : interfaceName;
			this.INTERFACES_PATH = interfacesPath == null ? resolver
					.INTERFACES_PATH() : interfacesPath;
			this.PROXY_RESOURCES_PATHS = proxyResourcesPaths == null ? resolver
					.PROXY_RESOURCES_PATHS() : proxyResourcesPaths;
			this.PROXY_SOURCES_PATHS = proxySourcesPaths == null ? resolver
					.PROXY_SOURCES_PATHS() : proxySourcesPaths;
			this.PROXY_TEMPLATES_PATHS = proxyTemplatesPaths == null ? resolver
					.PROXY_TEMPLATES_PATHS() : proxyTemplatesPaths;
			this.SIM_AUT_PATH = simAutPath == null ? resolver.SIM_AUT_PATH()
					: simAutPath;

			this.DESTINATION_PATH = destinationPath == null ? resolver
					.DESTINATION_PATH(this.INTERFACES_PATH) : destinationPath;

		} catch (final Exception e) {
			throw new ProxygenArgumentsException(
					ProxygenArgumentsException.CONSTRUCTOR(
							ProxyJavaGeneratorProgramArguments.class, compile,
							corba, destinationPath, interfaceName,
							interfacesPath, print, proxyResourcesPaths,
							proxySourcesPaths, proxyTemplatesPaths, simAutPath,
							wsdl), e);
		}
	}

	//
	// STATIC - METHODS
	//

	/**
	 * Deserializes the string <code>string</code> to a record of arguments.
	 * 
	 * @param string
	 *            The string. Not <code>null</code>.
	 * @return A record of arguments. Never <code>null</code>.
	 * @throws ProxygenArgumentsException
	 *             If something goes wrong while deserializing.
	 * @throws NullPointerException
	 *             If <code>string==null</code>.
	 */
	public static ProxyJavaGeneratorProgramArguments deserialize(final String string)
			throws ProxygenArgumentsException {

		if (string == null)
			throw new NullPointerException();

		try {
			/* Decode. */
			final String[] bytes = string.split(" ");
			final byte[] array = new byte[bytes.length];
			for (int i = 0; i < array.length; i++)
				array[i] = Byte.parseByte(bytes[i]);

			/* Deserialize. */
			final ByteArrayInputStream byteArrayStream = new ByteArrayInputStream(
					array);
			final ObjectInputStream objectStream = new ObjectInputStream(
					byteArrayStream);

			final Object object = objectStream.readObject();
			if (object instanceof ProxyJavaGeneratorProgramArguments)
				return (ProxyJavaGeneratorProgramArguments) object;

			throw new ProxygenArgumentsException(
					ProxygenArgumentsException.DESERIALIZE(
							ProxyJavaGeneratorProgramArguments.class, string),
					"The deserialization result \"" + object
							+ "\" is not a record of arguments.");

		} catch (final Exception e) {

			e.printStackTrace();

			if (e instanceof ProxygenArgumentsException)
				throw (ProxygenArgumentsException) e;

			throw new ProxygenArgumentsException(
					ProxygenArgumentsException.DESERIALIZE(
							ProxyJavaGeneratorProgramArguments.class, string), e);
		}
	}

	/**
	 * Serializes the record of arguments <code>arguments</code>.
	 * 
	 * @param arguments
	 *            The record of arguments. Not <code>null</code>.
	 * @return A string. Never <code>null</code>.
	 * @throws ProxygenArgumentsException
	 *             If something goes wrong while serializing.
	 * @throws NullPointerException
	 *             If <code>arguments==null</code>.
	 */
	public static String serialize(
			final ProxyJavaGeneratorProgramArguments arguments)
			throws ProxygenArgumentsException {

		if (arguments == null)
			throw new NullPointerException();

		try {

			/* Serialize. */
			final ByteArrayOutputStream byteArrayStream = new ByteArrayOutputStream();
			final ObjectOutputStream objectStream = new ObjectOutputStream(
					byteArrayStream);

			objectStream.writeObject(arguments);

			/* Encode. */
			byte[] array = byteArrayStream.toByteArray();
			final StringBuilder builder = new StringBuilder();
			for (final byte b : array)
				builder.append(" " + Byte.toString(b));

			return builder.toString().substring(1);

		} catch (final Exception e) {
			throw new ProxygenArgumentsException(
					ProxygenArgumentsException.SERIALIZE(
							ProxyJavaGeneratorProgramArguments.class, arguments), e);
		}
	}

	//
	// EXCEPTIONS
	//

	public static class ProxygenArgumentsException extends Exception {
		private static final long serialVersionUID = 1L;

		//
		// CONSTRUCTORS
		//

		protected ProxygenArgumentsException(final String message,
				final String cause) {
			super(message, new Throwable(cause));
		}

		protected ProxygenArgumentsException(final String message,
				final Throwable cause) {
			super(message, cause);
		}

		//
		// METHODS
		//

		protected static String CONSTRUCTOR(final Class<?> clazz,
				final boolean compile, boolean corba,
				final String destinationPath, final String interfaceName,
				final String interfacesPaths, final boolean print,
				final String proxyResourcesPaths,
				final String proxySourcesPaths,
				final String proxyTemplatesPaths, final String simAutPath,
				boolean wsdl) {

			return "The class \"" + clazz.getCanonicalName()
					+ "\" failed to construct arguments.";
		}

		protected static String DESERIALIZE(final Class<?> clazz,
				final String string) {

			return "The class \"" + clazz.getCanonicalName()
					+ "\" failed to deserialize the string \"" + string
					+ "\" to arguments.";
		}

		protected static String SERIALIZE(final Class<?> clazz,
				final ProxyJavaGeneratorProgramArguments arguments) {

			return "The class \"" + clazz.getCanonicalName()
					+ "\" failed to serialize the arguments \"" + arguments
					+ "\".";
		}
	}
}
