#!/bin/bash

# Eclipse target directory:
ECLIPSE_DIR="$HOME/.ect-build-eclipse-x86_64"

# Eclipse downloads:
ECLIPSE_ARCHIVE="eclipse-modeling-juno-SR1-linux-gtk-x86_64.tar.gz"
ECLIPSE_SERVER="http://ftp-stud.fht-esslingen.de/pub/Mirrors/eclipse/technology/epp/downloads/release/juno/SR1"
ATL_ARCHIVE="m2m-atl-Update-3.3.1.zip"
ATL_SERVER="http://ftp-stud.fht-esslingen.de/pub/Mirrors/eclipse/mmt/atl/downloads/drops/3.3.1/R201209061455"

# Determine working and script directories:
WORKING_DIR=$(pwd)
SCRIPT_DIR=$(dirname $(which $0));
cd $SCRIPT_DIR
SCRIPT_DIR=$(pwd)
cd $WORKING_DIR

# Check if Eclipse is installed:
if [ ! -d "$ECLIPSE_DIR" ]; then
    echo "Setting up Eclipse build environment..."
    echo
    cd /tmp
    rm $ECLIPSE_ARCHIVE 2> /dev/null
    wget "$ECLIPSE_SERVER/$ECLIPSE_ARCHIVE"
    tar -xzf $ECLIPSE_ARCHIVE
    rm $ECLIPSE_ARCHIVE
    mv eclipse $ECLIPSE_DIR
    mkdir $ECLIPSE_DIR/dropins/eclipse
    rm $ATL_ARCHIVE 2> /dev/null
    wget "$ATL_SERVER/$ATL_ARCHIVE"
    unzip $ATL_ARCHIVE "plugins/*" "features/*" -d $ECLIPSE_DIR/dropins/eclipse > /dev/null
    rm $ATL_ARCHIVE    
    cd $WORKING_DIR
else
    echo "Eclipse build environment found."
fi

# Find the source directory:
SRC_DIR=$SCRIPT_DIR/../src
if [ -d "$SRC_DIR" ]; then
    cd $SRC_DIR
    SRC_DIR=$(pwd)
    cd $WORKING_DIR
    echo "Source directory found."
else
    echo "Error: cannot find source directory $SRC_DIR"
    exit 1
fi

# Find the launcher:
LAUNCHER=$(ls $ECLIPSE_DIR/plugins/org.eclipse.equinox.launcher_*.jar)
if [ ! -f "$LAUNCHER" ]; then
    echo "Error: cannot find Equinox launcher"
    exit 1
fi

# Find the build file:
BUILD_FILE=$(ls $ECLIPSE_DIR/plugins/org.eclipse.pde.build_*/scripts/build.xml)
if [ ! -f "$BUILD_FILE" ]; then
    echo "Error: cannot find build.xml"
    exit 1
fi

# Check if we can find out the revision number:
REV_FILE="$HOME/.ect-revision"
if [ -d "$SRC_DIR/.svn" ]; then
    cd $SRC_DIR
    REVISION=$(svn info | grep Revision | sed -e 's/Revision\: //g')
    if [ ! -e "$REV_FILE" ]; then
        echo "0" > $REV_FILE
    fi
    OLD_REVISION=$(cat $REV_FILE)
    echo "$REVISION" > $REV_FILE
    if [ "$REVISION" = "$OLD_REVISION" ]; then
        echo "Skipping update because revision number is unchanged."
        exit 0
    fi
fi

# Set up the build directory:
BUILD_DIR=/tmp/ect-build
rm -R -f $BUILD_DIR 2> /dev/null
mkdir $BUILD_DIR
mkdir $BUILD_DIR/features
mkdir $BUILD_DIR/plugins

# Create the plug-in / feature path:
echo
echo "Setting up build directory..."
for base in $(ls $SRC_DIR); do
    for dir in $(ls $SRC_DIR/$base); do
        echo "$dir" | grep 'feature$' > /dev/null
        if [ $? -eq 0 ] ; then
            cp -R $SRC_DIR/$base/$dir $BUILD_DIR/features
        else
            cp -R $SRC_DIR/$base/$dir $BUILD_DIR/plugins
        fi
    done
done

# Function for running the builder:
function build {

    # The feature to be build:
    FEATURE=$1

    # Generate the build.properties configuration file:
    BUILD_CONF=/tmp/ect-build-conf
    rm -R -f $BUILD_CONF 2> /dev/null
    mkdir $BUILD_CONF

    cat > $BUILD_CONF/build.properties <<EOF
topLevelElementType=feature
topLevelElementId=$FEATURE
runPackager=true
configs=*, *, *
outputUpdateJars=true
archivePrefix=eclipse
buildDirectory=/tmp/ect-build-tmp
buildType=I
buildId=autobuild
buildLabel=${buildType}.${buildId}
timestamp=007
base=$HOME
baseLocation=$ECLIPSE_DIR
baseos=linux
basews=gtk
basearch=x86_64
skipBase=true
skipMaps=true
skipFetch=true
logExtension=.log
javacDebugInfo=false 
javacFailOnError=true
javacVerbose=true
javacSource=1.6
javacTarget=1.6
p2.gathering=true
p2.metadata.repo.name=ECT Update Site
p2.artifact.repo.name=ECT Update Site
skipMirroring=true
EOF

    # Run the build application:
    echo
    echo "Building $FEATURE..."
    java -jar $LAUNCHER\
         -application org.eclipse.ant.core.antRunner\
         -buildfile $BUILD_FILE\
         -DbuildDirectory=$BUILD_DIR\
         -DbaseLocation=$ECLIPSE_DIR\
         -Dbuilder=$BUILD_CONF > $BUILD_DIR/compile.log

    cat $BUILD_DIR/compile.log | grep 'BUILD SUCCESSFUL' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "Build successful."
    else
        echo "0" > $REV_FILE
        echo "Build failed! See $BUILD_DIR/compile.log"
        exit 1
    fi

    # Clean-up build config:
    rm -R -f $BUILD_CONF

}  

# Now invoke the builder for all features:
build org.ect.reo.feature
build org.ect.ea.feature
build org.ect.codegen.feature
build org.ect.convert.feature

# The build repository:
BUILD_REPO=$BUILD_DIR/buildRepo

# Remove unnessacary meta-data:
rm -f $BUILD_REPO/artifacts.xml $BUILD_REPO/content.xml

# Generate site.xml:
echo
echo "Generating update site..."
CAT="Extensible Coordination Tools"
cat > $BUILD_REPO/site.xml <<EOF
<site>
  <description url="http://reo.project.cwi.nl/update">$CAT</description>
EOF
for jar in $(ls $BUILD_REPO/features); do
    ID=$(echo $jar | sed -e 's/\_.*$//g')
    VERSION=$(echo $jar | sed -e 's/^.*\_//g' | sed -e 's/\.jar$//g')
    cat >> $BUILD_REPO/site.xml <<EOF
  <feature url="features/$jar" id="$ID" version="$VERSION">
    <category name="$CAT"/>
  </feature>
EOF
done
cat >> $BUILD_REPO/site.xml <<EOF
  <category-def name="$CAT" label="$CAT"/>
</site>
EOF

# Move the update site to the target location:
UPDATE_DIR="$HOME/sites/reo.project.cwi.nl/WWW/update"
if [ ! -d "$UPDATE_DIR" ]; then
    echo "0" > $REV_FILE
    echo "Error: directory for update site not found: $UPDATE_DIR"
    exit 1
fi
rm -f $UPDATE_DIR/site.xml 2> /dev/null
rm -f -R $UPDATE_DIR/plugins/* 2> /dev/null
rm -f -R $UPDATE_DIR/features/* 2> /dev/null
mkdir $UPDATE_DIR/plugins 2> /dev/null
mkdir $UPDATE_DIR/features 2> /dev/null
cp $BUILD_REPO/site.xml $UPDATE_DIR
cp $BUILD_REPO/plugins/* $UPDATE_DIR/plugins
cp $BUILD_REPO/features/* $UPDATE_DIR/features
echo "Finished."

# Time stamp in index.html:
DATE=$(date)
echo "<html><head></head><body>Last successful build on $DATE</body></html>" > $UPDATE_DIR/index.html

# Clean-up build directory:
rm -R -f $BUILD_DIR

